(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{316:function(n,t,s){n.exports=s.p+"assets/img/optimizeUpdateChildren.e4c85c40.png"},317:function(n,t,s){n.exports=s.p+"assets/img/newBeforeAndOldBefore.e017b452.png"},318:function(n,t,s){n.exports=s.p+"assets/img/newAfterAndOldAfter.cf98adc0.png"},319:function(n,t,s){n.exports=s.p+"assets/img/newAfterAndOldBefore.2ddb5ee5.png"},320:function(n,t,s){n.exports=s.p+"assets/img/newAfterAndOldBefore2.bace2f7f.png"},321:function(n,t,s){n.exports=s.p+"assets/img/newBeforeAndOldAfter.98dbc208.png"},322:function(n,t,s){n.exports=s.p+"assets/img/newAfterAndOldAfter2.18c1c6dd.png"},323:function(n,t,s){n.exports=s.p+"assets/img/doubleComparison.e9bdf5c1.png"},389:function(n,t,s){"use strict";s.r(t);var a=s(14),e=Object(a.a)({},(function(){var n=this,t=n._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h1",{attrs:{id:"优化更新子节点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#优化更新子节点"}},[n._v("#")]),n._v(" 优化更新子节点")]),n._v(" "),t("p",[n._v("上一节总结的时候，我们说双重循环的时间复杂度为"),t("code",[n._v("O(n^2)")]),n._v("，假设我们有一万个子节点，那我们就需要计算一亿次。这几乎是没法用到实际场景中的。本节我们一起来研究，Vue对于这种情况是怎么处理的。")]),n._v(" "),t("h2",{attrs:{id:"优化策略"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#优化策略"}},[n._v("#")]),n._v(" 优化策略")]),n._v(" "),t("p",[n._v("在大部分场景中，并不是所有的子节点位置都会发生移动，一个列表总有几个节点的位置是不变的。针对这些位置不变或者说可以预测的节点。我们不需要在循环中查找，只需要查找他特殊的节点。具体思路如下：")]),n._v(" "),t("ul",[t("li",[n._v("先把"),t("code",[n._v("newChildren")]),n._v("数组里的所有未处理子节点的第一个子节点和"),t("code",[n._v("oldChildren")]),n._v("数组里所有未处理子节点的第一个子节点做比对，如果相同，那就直接进入更新节点的操作；")]),n._v(" "),t("li",[n._v("如果不同，再把"),t("code",[n._v("newChildren")]),n._v("数组里所有未处理子节点的最后一个子节点和"),t("code",[n._v("oldChildren")]),n._v("数组里所有未处理子节点的最后一个子节点做比对，如果相同，那就直接进入更新节点的操作；")]),n._v(" "),t("li",[n._v("如果不同，再把"),t("code",[n._v("newChildren")]),n._v("数组里所有未处理子节点的最后一个子节点和"),t("code",[n._v("oldChildren")]),n._v("数组里所有未处理子节点的第一个子节点做比对，如果相同，那就直接进入更新节点的操作，更新完后再将"),t("code",[n._v("oldChildren")]),n._v("数组里的该节点移动到与"),t("code",[n._v("newChildren")]),n._v("数组里节点相同的位置；")]),n._v(" "),t("li",[n._v("如果不同，再把"),t("code",[n._v("newChildren")]),n._v("数组里所有未处理子节点的第一个子节点和"),t("code",[n._v("oldChildren")]),n._v("数组里所有未处理子节点的最后一个子节点做比对，如果相同，那就直接进入更新节点的操作，更新完后再将"),t("code",[n._v("oldChildren")]),n._v("数组里的该节点移动到与"),t("code",[n._v("newChildren")]),n._v("数组里节点相同的位置；")]),n._v(" "),t("li",[n._v("最后四种情况都试完如果还不同，那就按照之前循环的方式来查找节点。")])]),n._v(" "),t("p",[t("img",{attrs:{src:s(316),alt:"optimizeUpdateChildren"}})]),n._v(" "),t("p",[n._v("在上图中，我们把")]),n._v(" "),t("ul",[t("li",[t("code",[n._v("newChildren")]),n._v("数组里的所有未处理子节点的第一个子节点称为：新前；")]),n._v(" "),t("li",[t("code",[n._v("newChildren")]),n._v("数组里的所有未处理子节点的最后一个子节点称为：新后；")]),n._v(" "),t("li",[t("code",[n._v("oldChildren")]),n._v("数组里的所有未处理子节点的第一个子节点称为：旧前；")]),n._v(" "),t("li",[t("code",[n._v("oldChildren")]),n._v("数组里的所有未处理子节点的最后一个子节点称为：旧后；")])]),n._v(" "),t("p",[n._v("了解这些名词后，我们一起梳理下上文提到的四种查找方式。")]),n._v(" "),t("h2",{attrs:{id:"新前与旧前"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#新前与旧前"}},[n._v("#")]),n._v(" 新前与旧前")]),n._v(" "),t("p",[n._v("使用"),t("code",[n._v("新前")]),n._v("和"),t("code",[n._v("旧前")]),n._v("节点进行对比，对比是否为同一个节点，如果为同一个节点，就更新该节点。")]),n._v(" "),t("p",[t("img",{attrs:{src:s(317),alt:"newBeforeAndOldBefore"}})]),n._v(" "),t("p",[t("code",[n._v("新前")]),n._v("和"),t("code",[n._v("旧前")]),n._v("的位置相同，所以不需要执行移动的操作，只需要更新节点")]),n._v(" "),t("h2",{attrs:{id:"新后与旧后"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#新后与旧后"}},[n._v("#")]),n._v(" 新后与旧后")]),n._v(" "),t("p",[n._v("使用"),t("code",[n._v("新后")]),n._v("和"),t("code",[n._v("旧后")]),n._v("节点进行对比，对比是否为同一个节点，如果为同一个节点，就更新该节点。")]),n._v(" "),t("p",[t("img",{attrs:{src:s(318),alt:"newAfterAndOldAfter"}})]),n._v(" "),t("p",[t("code",[n._v("新后")]),n._v("和"),t("code",[n._v("旧后")]),n._v("的位置相同，所以不需要执行移动的操作，只需要更新节点")]),n._v(" "),t("h2",{attrs:{id:"新后与旧前"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#新后与旧前"}},[n._v("#")]),n._v(" 新后与旧前")]),n._v(" "),t("p",[n._v("使用"),t("code",[n._v("新后")]),n._v("和"),t("code",[n._v("旧前")]),n._v("节点进行对比，对比是否为同一个节点，如果为同一个节点，就更新该节点。")]),n._v(" "),t("p",[t("img",{attrs:{src:s(319),alt:"newAfterAndOldBefore"}})]),n._v(" "),t("p",[n._v("如果两个节点是同一个节点，由于他们的位置不同，所以除了更新节点外，还需要执行移动节点的操作")]),n._v(" "),t("p",[t("img",{attrs:{src:s(320),alt:"newAfterAndOldBefore2"}})]),n._v(" "),t("h2",{attrs:{id:"新前与旧后"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#新前与旧后"}},[n._v("#")]),n._v(" 新前与旧后")]),n._v(" "),t("p",[n._v("使用"),t("code",[n._v("新前")]),n._v("和"),t("code",[n._v("旧后")]),n._v("节点进行对比，对比是否为同一个节点，如果为同一个节点，就更新该节点。")]),n._v(" "),t("p",[t("img",{attrs:{src:s(321),alt:"newBeforeAndOldAfter"}})]),n._v(" "),t("p",[n._v("如果两个节点是同一个节点，由于他们的位置不同，所以除了更新节点外，还需要执行移动节点的操作")]),n._v(" "),t("p",[t("img",{attrs:{src:s(322),alt:"newAfterAndOldAfter2"}})]),n._v(" "),t("p",[n._v("以上就是四种优化策略。大部分情况下，通过前面四种方式就可以找到相同的节点，所以节省了很多次循环操作。")]),n._v(" "),t("p",[n._v("四种优化策略执行完毕后，再通循环的方式去执行未处理过的节点即可。")]),n._v(" "),t("h2",{attrs:{id:"双端比较"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#双端比较"}},[n._v("#")]),n._v(" 双端比较")]),n._v(" "),t("p",[n._v("基于前面的优化策略，节点有可能是从后面对比，也有可能从后面对比。所以我们循环执行的时候，就不能只从前或从后循环，而是要从两边进行双端比较。")]),n._v(" "),t("p",[t("img",{attrs:{src:s(323),alt:"doubleComparison"}})]),n._v(" "),t("p",[n._v("解释下上述名词。")]),n._v(" "),t("ul",[t("li",[t("code",[n._v("newStartIdx")]),n._v(":"),t("code",[n._v("newChildren")]),n._v("数组里开始位置的下标；")]),n._v(" "),t("li",[t("code",[n._v("newEndIdx")]),n._v(":"),t("code",[n._v("newChildren")]),n._v("数组里结束位置的下标；")]),n._v(" "),t("li",[t("code",[n._v("oldStartIdx")]),n._v(":"),t("code",[n._v("oldChildren")]),n._v("数组里开始位置的下标；")]),n._v(" "),t("li",[t("code",[n._v("oldEndIdx")]),n._v(":"),t("code",[n._v("oldChildren")]),n._v("数组里结束位置的下标；")])]),n._v(" "),t("p",[n._v("再循环体内，每处理一个节点，就将下标向指定的方向移动一个位置，由于我们对比的是新旧两个节点列表，就相当于一次性处理两个节点，将新旧两个节点的下标都向指定方向移动一个位置。")]),n._v(" "),t("p",[n._v("开始位置的节点对比完后，就向后移动一个位置。结束位置的节点对比完后，就向前移动一个位置。")]),n._v(" "),t("p",[n._v("换句话说，"),t("code",[n._v("newStartIdx")]),n._v("和"),t("code",[n._v("oldStartIdx")]),n._v("只能向后移动，"),t("code",[n._v("newEndIdx")]),n._v("和"),t("code",[n._v("oldEndIdx")]),n._v("只能向前移动。")]),n._v(" "),t("p",[n._v("当开始位置大于等于结束位置时，就代表所有的节点都被遍历过了，则结束循环")]),n._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("while")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("oldStartIdx "),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("<=")]),n._v(" oldEndIdx "),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("&&")]),n._v(" newStartIdx "),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("<=")]),n._v(" oldStartIdx"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 循环内部")]),n._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n")]),t("div",{pre:!0,attrs:{class:"m-mdic-copy-wrapper"}},[t("div",{pre:!0,attrs:{class:"u-mdic-copy-notify",id:"j-notify-1698239390294-85929"}},[n._v("成功")]),t("button",{pre:!0,attrs:{class:"u-mdic-copy-btn j-mdic-copy-btn","data-mdic-content":"while(oldStartIdx <= oldEndIdx && newStartIdx <= oldStartIdx) {\n  // 循环内部\n}\n","data-mdic-attach-content":"","data-mdic-notify-id":"j-notify-1698239390294-85929","data-mdic-notify-delay":"2000","data-mdic-copy-fail-text":"copy fail",onclick:"!function(t){const e={copy:(t='',e='')=>new Promise((c,o)=>{const n=document.createElement('textarea'),d=e?`\\n\\n${e}`:e;n.value=`${t}${d}`,document.body.appendChild(n),n.select();try{const t=document.execCommand('copy');document.body.removeChild(n),t?c():o()}catch(t){document.body.removeChild(n),o()}}),btnClick(t){const c=t&&t.dataset?t.dataset:{},o=c.mdicNotifyId,n=document.getElementById(o),d=c.mdicNotifyDelay,i=c.mdicCopyFailText;e.copy(c.mdicContent,c.mdicAttachContent).then(()=>{n.style.display='block',setTimeout(()=>{n.style.display='none'},d)}).catch(()=>{alert(i)})}};e.btnClick(t)}(this);"}},[n._v("复制代码")])])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br")])]),t("p",[n._v("通过双端比较的循环方式，可以保证循环结束时，没有未处理的节点。")]),n._v(" "),t("h2",{attrs:{id:"回归源码"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#回归源码"}},[n._v("#")]),n._v(" 回归源码")]),n._v(" "),t("p",[n._v("逻辑都梳理完毕后，我们一起看看源码是怎么写的，源码在"),t("code",[n._v("/src/core/vdom/patch.js")])]),n._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("function")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("updateChildren")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),t("span",{pre:!0,attrs:{class:"token parameter"}},[n._v("parentElm"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" oldCh"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" newCh"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" insertedVnodeQueue"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" removeOnly")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// oldChildren开始索引")]),n._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("let")]),n._v(" oldStartIdx "),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[n._v("0")]),n._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// newChildren开始索引")]),n._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("let")]),n._v(" newStartIdx "),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[n._v("0")]),n._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// oldChildren结束索引")]),n._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("let")]),n._v(" oldEndIdx "),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" oldCh"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),n._v("length "),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("-")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[n._v("1")]),n._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// oldChildren 第一个节点")]),n._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("let")]),n._v(" oldStartVnode "),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" oldCh"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[n._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("]")]),n._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// oldChildren 最后一个节点")]),n._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("let")]),n._v(" oldEndVnode "),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" oldCh"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("[")]),n._v("oldEndIdx"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("]")]),n._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// newChildren 结束索引")]),n._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("let")]),n._v(" newEndIdx "),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" newCh"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),n._v("length "),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("-")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[n._v("1")]),n._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// newChildren 第一个节点")]),n._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("let")]),n._v(" newStartVnode "),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" newCh"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[n._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("]")]),n._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// newChildren 最后一个节点")]),n._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("let")]),n._v(" newEndVnode "),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" newCh"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("[")]),n._v("newEndIdx"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("]")]),n._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("let")]),n._v(" oldKeyToIdx"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" idxInOld"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" vnodeToMove"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" refElm\n\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// removeOnly is a special flag used only by <transition-group>")]),n._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// to ensure removed elements stay in correct relative positions")]),n._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// during leaving transitions")]),n._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("const")]),n._v(" canMove "),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("!")]),n._v("removeOnly\n\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[n._v('// 双端对比，以"新前"、"新后"、"旧前"、"旧后"的方式开始比对节点')]),n._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("while")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("oldStartIdx "),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("<=")]),n._v(" oldEndIdx "),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("&&")]),n._v(" newStartIdx "),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("<=")]),n._v(" newEndIdx"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 旧前不存在，继续处理下一个")]),n._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("if")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("isUndef")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("oldStartVnode"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n      oldStartVnode "),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" oldCh"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("[")]),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("++")]),n._v("oldStartIdx"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("]")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// Vnode has been moved left")]),n._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 旧后不存在，继续处理下一个")]),n._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("else")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("if")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("isUndef")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("oldEndVnode"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n      oldEndVnode "),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" oldCh"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("[")]),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("--")]),n._v("oldEndIdx"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("]")]),n._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 判断旧前和新前是否为同一个节点")]),n._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("else")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("if")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("sameVnode")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("oldStartVnode"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" newStartVnode"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 更新节点")]),n._v("\n      "),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("patchVnode")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("oldStartVnode"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" newStartVnode"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" insertedVnodeQueue"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 继续处理下一个")]),n._v("\n      oldStartVnode "),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" oldCh"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("[")]),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("++")]),n._v("oldStartIdx"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("]")]),n._v("\n      newStartVnode "),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" newCh"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("[")]),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("++")]),n._v("newStartIdx"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("]")]),n._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 判断旧后和新后是否为同一个节点")]),n._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("else")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("if")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("sameVnode")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("oldEndVnode"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" newEndVnode"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 更新节点")]),n._v("\n      "),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("patchVnode")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("oldEndVnode"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" newEndVnode"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" insertedVnodeQueue"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 继续处理下一个")]),n._v("\n      oldEndVnode "),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" oldCh"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("[")]),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("--")]),n._v("oldEndIdx"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("]")]),n._v("\n      newEndVnode "),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" newCh"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("[")]),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("--")]),n._v("newEndIdx"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("]")]),n._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 判断旧前和新后是否为同一个节点")]),n._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("else")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("if")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("sameVnode")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("oldStartVnode"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" newEndVnode"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// Vnode moved right")]),n._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 更新节点")]),n._v("\n      "),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("patchVnode")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("oldStartVnode"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" newEndVnode"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" insertedVnodeQueue"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 可移动的话，再移动节点")]),n._v("\n      canMove "),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("&&")]),n._v(" nodeOps"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("insertBefore")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("parentElm"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" oldStartVnode"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),n._v("elm"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" nodeOps"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("nextSibling")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("oldEndVnode"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),n._v("elm"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 继续处理下一个")]),n._v("\n      oldStartVnode "),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" oldCh"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("[")]),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("++")]),n._v("oldStartIdx"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("]")]),n._v("\n      newEndVnode "),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" newCh"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("[")]),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("--")]),n._v("newEndIdx"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("]")]),n._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 判断旧后和新前是否为同一个节点")]),n._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("else")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("if")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("sameVnode")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("oldEndVnode"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" newStartVnode"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// Vnode moved left")]),n._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 更新节点")]),n._v("\n      "),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("patchVnode")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("oldEndVnode"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" newStartVnode"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" insertedVnodeQueue"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 可移动的话，再移动节点")]),n._v("\n      canMove "),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("&&")]),n._v(" nodeOps"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("insertBefore")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("parentElm"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" oldEndVnode"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),n._v("elm"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" oldStartVnode"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),n._v("elm"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 继续处理下一个")]),n._v("\n      oldEndVnode "),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" oldCh"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("[")]),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("--")]),n._v("oldEndIdx"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("]")]),n._v("\n      newStartVnode "),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" newCh"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("[")]),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("++")]),n._v("newStartIdx"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("]")]),n._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 如果不属于以上四种情况，就进行常规的循环比对patch")]),n._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("else")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("if")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("isUndef")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("oldKeyToIdx"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" oldKeyToIdx "),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("createKeyToOldIdx")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("oldCh"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" oldStartIdx"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" oldEndIdx"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\n      idxInOld "),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("isDef")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("newStartVnode"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),n._v("key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\n        "),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("?")]),n._v(" oldKeyToIdx"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("[")]),n._v("newStartVnode"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),n._v("key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("]")]),n._v("\n        "),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v(":")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("findIdxInOld")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("newStartVnode"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" oldCh"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" oldStartIdx"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" oldEndIdx"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[n._v("//  oldChildren找不到newChildren的子节点")]),n._v("\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("if")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("isUndef")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("idxInOld"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// New element")]),n._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 新增节点，插入到指定位置")]),n._v("\n        "),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("createElm")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("newStartVnode"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" insertedVnodeQueue"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" parentElm"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" oldStartVnode"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),n._v("elm"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[n._v("false")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" newCh"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" newStartIdx"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 如果在oldChildren里找到了当前循环的newChildren里的子节点")]),n._v("\n      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("else")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n        vnodeToMove "),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" oldCh"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("[")]),n._v("idxInOld"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("]")]),n._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 如果两个节点相同")]),n._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("if")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("sameVnode")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("vnodeToMove"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" newStartVnode"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n          "),t("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 调用patchVnode更新节点")]),n._v("\n          "),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("patchVnode")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("vnodeToMove"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" newStartVnode"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" insertedVnodeQueue"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\n          oldCh"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("[")]),n._v("idxInOld"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("]")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("undefined")]),n._v("\n          "),t("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// canmove表示是否需要移动节点，如果为true表示需要移动，则移动节点，如果为false则不用移动")]),n._v("\n          canMove "),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("&&")]),n._v(" nodeOps"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("insertBefore")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("parentElm"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" vnodeToMove"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),n._v("elm"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" oldStartVnode"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),n._v("elm"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// key不同或者key相同但element不同，则视为不同，需要新建")]),n._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("else")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n          "),t("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// same key but different element. treat as new element")]),n._v("\n          "),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("createElm")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("newStartVnode"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" insertedVnodeQueue"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" parentElm"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" oldStartVnode"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),n._v("elm"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[n._v("false")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" newCh"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" newStartIdx"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n      newStartVnode "),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" newCh"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("[")]),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("++")]),n._v("newStartIdx"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("]")]),n._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("if")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("oldStartIdx "),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v(">")]),n._v(" oldEndIdx"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[n._v("/**\n     * 如果oldChildren比newChildren先循环完毕，\n     * 那么newChildren里面剩余的节点都是需要新增的节点，\n     * 把[newStartIdx, newEndIdx]之间的所有节点都插入到DOM中\n     */")]),n._v("\n    refElm "),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("isUndef")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("newCh"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("[")]),n._v("newEndIdx "),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("+")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[n._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("?")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("null")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v(":")]),n._v(" newCh"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("[")]),n._v("newEndIdx "),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("+")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[n._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),n._v("elm\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("addVnodes")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("parentElm"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" refElm"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" newCh"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" newStartIdx"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" newEndIdx"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" insertedVnodeQueue"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("else")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("if")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("newStartIdx "),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v(">")]),n._v(" newEndIdx"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[n._v("/**\n     * 如果newChildren比oldChildren先循环完毕，\n     * 那么oldChildren里面剩余的节点都是需要删除的节点，\n     * 把[oldStartIdx, oldEndIdx]之间的所有节点都删除\n     */")]),n._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("removeVnodes")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("parentElm"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" oldCh"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" oldStartIdx"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" oldEndIdx"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n")]),t("div",{pre:!0,attrs:{class:"m-mdic-copy-wrapper"}},[t("div",{pre:!0,attrs:{class:"u-mdic-copy-notify",id:"j-notify-1698239390294-98615"}},[n._v("成功")]),t("button",{pre:!0,attrs:{class:"u-mdic-copy-btn j-mdic-copy-btn","data-mdic-content":'function updateChildren (parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) {\n  // oldChildren开始索引\n  let oldStartIdx = 0\n  // newChildren开始索引\n  let newStartIdx = 0\n  // oldChildren结束索引\n  let oldEndIdx = oldCh.length - 1\n  // oldChildren 第一个节点\n  let oldStartVnode = oldCh[0]\n  // oldChildren 最后一个节点\n  let oldEndVnode = oldCh[oldEndIdx]\n  // newChildren 结束索引\n  let newEndIdx = newCh.length - 1\n  // newChildren 第一个节点\n  let newStartVnode = newCh[0]\n  // newChildren 最后一个节点\n  let newEndVnode = newCh[newEndIdx]\n  let oldKeyToIdx, idxInOld, vnodeToMove, refElm\n\n  // removeOnly is a special flag used only by <transition-group>\n  // to ensure removed elements stay in correct relative positions\n  // during leaving transitions\n  const canMove = !removeOnly\n\n  // 双端对比，以"新前"、"新后"、"旧前"、"旧后"的方式开始比对节点\n  while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n    // 旧前不存在，继续处理下一个\n    if (isUndef(oldStartVnode)) {\n      oldStartVnode = oldCh[++oldStartIdx] // Vnode has been moved left\n    // 旧后不存在，继续处理下一个\n    } else if (isUndef(oldEndVnode)) {\n      oldEndVnode = oldCh[--oldEndIdx]\n    // 判断旧前和新前是否为同一个节点\n    } else if (sameVnode(oldStartVnode, newStartVnode)) {\n      // 更新节点\n      patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue)\n      // 继续处理下一个\n      oldStartVnode = oldCh[++oldStartIdx]\n      newStartVnode = newCh[++newStartIdx]\n    // 判断旧后和新后是否为同一个节点\n    } else if (sameVnode(oldEndVnode, newEndVnode)) {\n      // 更新节点\n      patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue)\n      // 继续处理下一个\n      oldEndVnode = oldCh[--oldEndIdx]\n      newEndVnode = newCh[--newEndIdx]\n    // 判断旧前和新后是否为同一个节点\n    } else if (sameVnode(oldStartVnode, newEndVnode)) { // Vnode moved right\n      // 更新节点\n      patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue)\n      // 可移动的话，再移动节点\n      canMove && nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm))\n      // 继续处理下一个\n      oldStartVnode = oldCh[++oldStartIdx]\n      newEndVnode = newCh[--newEndIdx]\n    // 判断旧后和新前是否为同一个节点\n    } else if (sameVnode(oldEndVnode, newStartVnode)) { // Vnode moved left\n      // 更新节点\n      patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue)\n      // 可移动的话，再移动节点\n      canMove && nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm)\n      // 继续处理下一个\n      oldEndVnode = oldCh[--oldEndIdx]\n      newStartVnode = newCh[++newStartIdx]\n    // 如果不属于以上四种情况，就进行常规的循环比对patch\n    } else {\n      if (isUndef(oldKeyToIdx)) oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx)\n      idxInOld = isDef(newStartVnode.key)\n        ? oldKeyToIdx[newStartVnode.key]\n        : findIdxInOld(newStartVnode, oldCh, oldStartIdx, oldEndIdx)\n      //  oldChildren找不到newChildren的子节点\n      if (isUndef(idxInOld)) { // New element\n        // 新增节点，插入到指定位置\n        createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx)\n      // 如果在oldChildren里找到了当前循环的newChildren里的子节点\n      } else {\n        vnodeToMove = oldCh[idxInOld]\n        // 如果两个节点相同\n        if (sameVnode(vnodeToMove, newStartVnode)) {\n          // 调用patchVnode更新节点\n          patchVnode(vnodeToMove, newStartVnode, insertedVnodeQueue)\n          oldCh[idxInOld] = undefined\n          // canmove表示是否需要移动节点，如果为true表示需要移动，则移动节点，如果为false则不用移动\n          canMove && nodeOps.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm)\n        // key不同或者key相同但element不同，则视为不同，需要新建\n        } else {\n          // same key but different element. treat as new element\n          createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx)\n        }\n      }\n      newStartVnode = newCh[++newStartIdx]\n    }\n  }\n  if (oldStartIdx > oldEndIdx) {\n    /**\n     * 如果oldChildren比newChildren先循环完毕，\n     * 那么newChildren里面剩余的节点都是需要新增的节点，\n     * 把[newStartIdx, newEndIdx]之间的所有节点都插入到DOM中\n     */\n    refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm\n    addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue)\n  } else if (newStartIdx > newEndIdx) {\n    /**\n     * 如果newChildren比oldChildren先循环完毕，\n     * 那么oldChildren里面剩余的节点都是需要删除的节点，\n     * 把[oldStartIdx, oldEndIdx]之间的所有节点都删除\n     */\n    removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx)\n  }\n}\n',"data-mdic-attach-content":"","data-mdic-notify-id":"j-notify-1698239390294-98615","data-mdic-notify-delay":"2000","data-mdic-copy-fail-text":"copy fail",onclick:"!function(t){const e={copy:(t='',e='')=>new Promise((c,o)=>{const n=document.createElement('textarea'),d=e?`\\n\\n${e}`:e;n.value=`${t}${d}`,document.body.appendChild(n),n.select();try{const t=document.execCommand('copy');document.body.removeChild(n),t?c():o()}catch(t){document.body.removeChild(n),o()}}),btnClick(t){const c=t&&t.dataset?t.dataset:{},o=c.mdicNotifyId,n=document.getElementById(o),d=c.mdicNotifyDelay,i=c.mdicCopyFailText;e.copy(c.mdicContent,c.mdicAttachContent).then(()=>{n.style.display='block',setTimeout(()=>{n.style.display='none'},d)}).catch(()=>{alert(i)})}};e.btnClick(t)}(this);"}},[n._v("复制代码")])])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br"),t("span",{staticClass:"line-number"},[n._v("18")]),t("br"),t("span",{staticClass:"line-number"},[n._v("19")]),t("br"),t("span",{staticClass:"line-number"},[n._v("20")]),t("br"),t("span",{staticClass:"line-number"},[n._v("21")]),t("br"),t("span",{staticClass:"line-number"},[n._v("22")]),t("br"),t("span",{staticClass:"line-number"},[n._v("23")]),t("br"),t("span",{staticClass:"line-number"},[n._v("24")]),t("br"),t("span",{staticClass:"line-number"},[n._v("25")]),t("br"),t("span",{staticClass:"line-number"},[n._v("26")]),t("br"),t("span",{staticClass:"line-number"},[n._v("27")]),t("br"),t("span",{staticClass:"line-number"},[n._v("28")]),t("br"),t("span",{staticClass:"line-number"},[n._v("29")]),t("br"),t("span",{staticClass:"line-number"},[n._v("30")]),t("br"),t("span",{staticClass:"line-number"},[n._v("31")]),t("br"),t("span",{staticClass:"line-number"},[n._v("32")]),t("br"),t("span",{staticClass:"line-number"},[n._v("33")]),t("br"),t("span",{staticClass:"line-number"},[n._v("34")]),t("br"),t("span",{staticClass:"line-number"},[n._v("35")]),t("br"),t("span",{staticClass:"line-number"},[n._v("36")]),t("br"),t("span",{staticClass:"line-number"},[n._v("37")]),t("br"),t("span",{staticClass:"line-number"},[n._v("38")]),t("br"),t("span",{staticClass:"line-number"},[n._v("39")]),t("br"),t("span",{staticClass:"line-number"},[n._v("40")]),t("br"),t("span",{staticClass:"line-number"},[n._v("41")]),t("br"),t("span",{staticClass:"line-number"},[n._v("42")]),t("br"),t("span",{staticClass:"line-number"},[n._v("43")]),t("br"),t("span",{staticClass:"line-number"},[n._v("44")]),t("br"),t("span",{staticClass:"line-number"},[n._v("45")]),t("br"),t("span",{staticClass:"line-number"},[n._v("46")]),t("br"),t("span",{staticClass:"line-number"},[n._v("47")]),t("br"),t("span",{staticClass:"line-number"},[n._v("48")]),t("br"),t("span",{staticClass:"line-number"},[n._v("49")]),t("br"),t("span",{staticClass:"line-number"},[n._v("50")]),t("br"),t("span",{staticClass:"line-number"},[n._v("51")]),t("br"),t("span",{staticClass:"line-number"},[n._v("52")]),t("br"),t("span",{staticClass:"line-number"},[n._v("53")]),t("br"),t("span",{staticClass:"line-number"},[n._v("54")]),t("br"),t("span",{staticClass:"line-number"},[n._v("55")]),t("br"),t("span",{staticClass:"line-number"},[n._v("56")]),t("br"),t("span",{staticClass:"line-number"},[n._v("57")]),t("br"),t("span",{staticClass:"line-number"},[n._v("58")]),t("br"),t("span",{staticClass:"line-number"},[n._v("59")]),t("br"),t("span",{staticClass:"line-number"},[n._v("60")]),t("br"),t("span",{staticClass:"line-number"},[n._v("61")]),t("br"),t("span",{staticClass:"line-number"},[n._v("62")]),t("br"),t("span",{staticClass:"line-number"},[n._v("63")]),t("br"),t("span",{staticClass:"line-number"},[n._v("64")]),t("br"),t("span",{staticClass:"line-number"},[n._v("65")]),t("br"),t("span",{staticClass:"line-number"},[n._v("66")]),t("br"),t("span",{staticClass:"line-number"},[n._v("67")]),t("br"),t("span",{staticClass:"line-number"},[n._v("68")]),t("br"),t("span",{staticClass:"line-number"},[n._v("69")]),t("br"),t("span",{staticClass:"line-number"},[n._v("70")]),t("br"),t("span",{staticClass:"line-number"},[n._v("71")]),t("br"),t("span",{staticClass:"line-number"},[n._v("72")]),t("br"),t("span",{staticClass:"line-number"},[n._v("73")]),t("br"),t("span",{staticClass:"line-number"},[n._v("74")]),t("br"),t("span",{staticClass:"line-number"},[n._v("75")]),t("br"),t("span",{staticClass:"line-number"},[n._v("76")]),t("br"),t("span",{staticClass:"line-number"},[n._v("77")]),t("br"),t("span",{staticClass:"line-number"},[n._v("78")]),t("br"),t("span",{staticClass:"line-number"},[n._v("79")]),t("br"),t("span",{staticClass:"line-number"},[n._v("80")]),t("br"),t("span",{staticClass:"line-number"},[n._v("81")]),t("br"),t("span",{staticClass:"line-number"},[n._v("82")]),t("br"),t("span",{staticClass:"line-number"},[n._v("83")]),t("br"),t("span",{staticClass:"line-number"},[n._v("84")]),t("br"),t("span",{staticClass:"line-number"},[n._v("85")]),t("br"),t("span",{staticClass:"line-number"},[n._v("86")]),t("br"),t("span",{staticClass:"line-number"},[n._v("87")]),t("br"),t("span",{staticClass:"line-number"},[n._v("88")]),t("br"),t("span",{staticClass:"line-number"},[n._v("89")]),t("br"),t("span",{staticClass:"line-number"},[n._v("90")]),t("br"),t("span",{staticClass:"line-number"},[n._v("91")]),t("br"),t("span",{staticClass:"line-number"},[n._v("92")]),t("br"),t("span",{staticClass:"line-number"},[n._v("93")]),t("br"),t("span",{staticClass:"line-number"},[n._v("94")]),t("br"),t("span",{staticClass:"line-number"},[n._v("95")]),t("br"),t("span",{staticClass:"line-number"},[n._v("96")]),t("br"),t("span",{staticClass:"line-number"},[n._v("97")]),t("br"),t("span",{staticClass:"line-number"},[n._v("98")]),t("br"),t("span",{staticClass:"line-number"},[n._v("99")]),t("br"),t("span",{staticClass:"line-number"},[n._v("100")]),t("br"),t("span",{staticClass:"line-number"},[n._v("101")]),t("br"),t("span",{staticClass:"line-number"},[n._v("102")]),t("br"),t("span",{staticClass:"line-number"},[n._v("103")]),t("br"),t("span",{staticClass:"line-number"},[n._v("104")]),t("br"),t("span",{staticClass:"line-number"},[n._v("105")]),t("br"),t("span",{staticClass:"line-number"},[n._v("106")]),t("br"),t("span",{staticClass:"line-number"},[n._v("107")]),t("br"),t("span",{staticClass:"line-number"},[n._v("108")]),t("br"),t("span",{staticClass:"line-number"},[n._v("109")]),t("br"),t("span",{staticClass:"line-number"},[n._v("110")]),t("br")])]),t("p",[n._v("上述注释写的较为详细，可以看出来，跟我们前面分析的思路是一样的，就不做重复的说明了。值得一提的是循环刚开始的时候")]),n._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 旧前不存在，继续处理下一个")]),n._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("if")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("isUndef")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("oldStartVnode"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n  oldStartVnode "),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" oldCh"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("[")]),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("++")]),n._v("oldStartIdx"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("]")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// Vnode has been moved left")]),n._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 旧后不存在，继续处理下一个")]),n._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("else")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("if")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("isUndef")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("oldEndVnode"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n  oldEndVnode "),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" oldCh"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("[")]),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("--")]),n._v("oldEndIdx"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("]")]),n._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("    \n")]),t("div",{pre:!0,attrs:{class:"m-mdic-copy-wrapper"}},[t("div",{pre:!0,attrs:{class:"u-mdic-copy-notify",id:"j-notify-1698239390296-58613"}},[n._v("成功")]),t("button",{pre:!0,attrs:{class:"u-mdic-copy-btn j-mdic-copy-btn","data-mdic-content":"// 旧前不存在，继续处理下一个\nif (isUndef(oldStartVnode)) {\n  oldStartVnode = oldCh[++oldStartIdx] // Vnode has been moved left\n// 旧后不存在，继续处理下一个\n} else if (isUndef(oldEndVnode)) {\n  oldEndVnode = oldCh[--oldEndIdx]\n}    \n","data-mdic-attach-content":"","data-mdic-notify-id":"j-notify-1698239390296-58613","data-mdic-notify-delay":"2000","data-mdic-copy-fail-text":"copy fail",onclick:"!function(t){const e={copy:(t='',e='')=>new Promise((c,o)=>{const n=document.createElement('textarea'),d=e?`\\n\\n${e}`:e;n.value=`${t}${d}`,document.body.appendChild(n),n.select();try{const t=document.execCommand('copy');document.body.removeChild(n),t?c():o()}catch(t){document.body.removeChild(n),o()}}),btnClick(t){const c=t&&t.dataset?t.dataset:{},o=c.mdicNotifyId,n=document.getElementById(o),d=c.mdicNotifyDelay,i=c.mdicCopyFailText;e.copy(c.mdicContent,c.mdicAttachContent).then(()=>{n.style.display='block',setTimeout(()=>{n.style.display='none'},d)}).catch(()=>{alert(i)})}};e.btnClick(t)}(this);"}},[n._v("复制代码")])])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br")])]),t("p",[t("code",[n._v("oldStartVnode")]),n._v(" 和 "),t("code",[n._v("oldEndVnode")]),n._v(" 的未定义可能出现在以下情况下：")]),n._v(" "),t("ol",[t("li",[n._v("初始化阶段：在首次渲染时，旧的子节点列表 "),t("code",[n._v("oldCh")]),n._v(" 尚未被赋值或定义。这意味着旧子节点列表为空，因此 "),t("code",[n._v("oldStartVnode")]),n._v(" 和 "),t("code",[n._v("oldEndVnode")]),n._v(" 在初始状态下是未定义的。")]),n._v(" "),t("li",[n._v("处理旧子节点的过程中：\n"),t("ul",[t("li",[n._v("在遍历旧子节点列表时，当 "),t("code",[n._v("oldStartIdx")]),n._v(" 指针超出了旧子节点列表的索引范围时，表示已经处理完所有旧子节点。此时，"),t("code",[n._v("oldStartVnode")]),n._v(" 将未定义。")]),n._v(" "),t("li",[n._v("同样地，当 "),t("code",[n._v("oldEndIdx")]),n._v(" 指针小于旧子节点列表的最小索引值时，表示已经处理完所有旧子节点。此时，"),t("code",[n._v("oldEndVnode")]),n._v(" 将未定义。")])])])]),n._v(" "),t("h2",{attrs:{id:"总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[n._v("#")]),n._v(" 总结")]),n._v(" "),t("p",[n._v("本节我们详细分析了Vue 针对同一层级下新旧子节点列表对比的优化策略。通过在双端对比循环中选择了从子节点列表中的4个特殊位置互相比对，分别是：新前与旧前，新后与旧后，新后与旧前，新前与旧后。特殊位置对比完后未处理的数据再递归判断，提升了对比算法的性能。")])])}),[],!1,null,null,null);t.default=e.exports}}]);