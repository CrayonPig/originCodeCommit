(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{285:function(t,s,n){t.exports=n.p+"assets/img/lifecycle-destroy.810540a5.png"},341:function(t,s,n){"use strict";n.r(s);var a=n(14),e=Object(a.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"销毁阶段"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#销毁阶段"}},[t._v("#")]),t._v(" 销毁阶段")]),t._v(" "),s("p",[t._v("接下来就到了Vue生命周期的最后一个阶段，销毁阶段。")]),t._v(" "),s("p",[t._v("从生命周期中我们可以看出，当调用"),s("code",[t._v("$destroy")]),t._v("方法时，Vue实例就进入了销毁阶段。此阶段Vue会清理和释放组件相关的资源。")]),t._v(" "),s("p",[t._v("需要注意的是，Vue 会自动管理组件实例的销毁过程，你不需要手动调用销毁方法。只要组件被从 DOM 中移除或者父组件被销毁，Vue 就会自动触发销毁阶段的生命周期钩子函数。这使得你可以专注于编写清理和释放资源的代码，而无需担心手动管理销毁过程。")]),t._v(" "),s("p",[s("img",{attrs:{src:n(285),alt:"lifecycle-destroy"}})]),t._v(" "),s("h2",{attrs:{id:"destroy"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#destroy"}},[t._v("#")]),t._v(" $destroy")]),t._v(" "),s("p",[s("code",[t._v("$destroy")]),t._v("方法位于"),s("code",[t._v("src/core/instance/lifecycle.js")]),t._v("中")]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Vue")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("$destroy")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("vm")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Component "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 防止重复调用")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vm"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_isBeingDestroyed"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("callHook")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vm"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'beforeDestroy'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 表示组件正在销毁")]),t._v("\n  vm"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_isBeingDestroyed "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 从父级中删除当前组件")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" parent "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" vm"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$parent\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果父组件没有被销毁，并且当前组件不是一个抽象组件")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("parent "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("parent"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_isBeingDestroyed "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("vm"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$options"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("abstract"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("remove")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("parent"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$children"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" vm"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 销毁watcher监听")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// _watcher 是组件的主 Watcher，负责监听组件中的响应式数据变化。")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vm"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_watcher"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    vm"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_watcher"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("teardown")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// _watchers 是组件所有的 Watcher 数组，包括主 Watcher 在内，存储了与组件的计算属性、侦听属性等相关联的其他 Watcher 实例。")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" vm"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_watchers"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    vm"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_watchers"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("teardown")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// __ob__标识了一个对象的响应式特性，并管理依赖追踪和引用计数等功能，可通过vmCount--来释放对应的Observer对象")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vm"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__ob__"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    vm"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__ob__"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("vmCount"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 标记组件已被销毁")]),t._v("\n  vm"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_isDestroyed "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将当前虚拟节点_vnode 设置为null，触发当前渲染树的销毁")]),t._v("\n  vm"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("__patch__")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vm"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_vnode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 触发destroyed生命周期钩子")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("callHook")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vm"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'destroyed'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 关闭所有监听事件")]),t._v("\n  vm"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("$off")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 删除 __vue__ 引用")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// __vue__ 用来获取组件实例")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vm"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$el"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    vm"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$el"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__vue__ "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 解除循环引用")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vm"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$vnode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    vm"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$vnode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("parent "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")]),s("div",{pre:!0,attrs:{class:"m-mdic-copy-wrapper"}},[s("div",{pre:!0,attrs:{class:"u-mdic-copy-notify",id:"j-notify-1689858627374-49100"}},[t._v("成功")]),s("button",{pre:!0,attrs:{class:"u-mdic-copy-btn j-mdic-copy-btn","data-mdic-content":"Vue.prototype.$destroy = function () {\n  const vm: Component = this\n  // 防止重复调用\n  if (vm._isBeingDestroyed) {\n    return\n  }\n\n  callHook(vm, 'beforeDestroy')\n\n  // 表示组件正在销毁\n  vm._isBeingDestroyed = true\n\n  // 从父级中删除当前组件\n  const parent = vm.$parent\n  // 如果父组件没有被销毁，并且当前组件不是一个抽象组件\n  if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {\n    remove(parent.$children, vm)\n  }\n  // 销毁watcher监听\n  // _watcher 是组件的主 Watcher，负责监听组件中的响应式数据变化。\n  if (vm._watcher) {\n    vm._watcher.teardown()\n  }\n  // _watchers 是组件所有的 Watcher 数组，包括主 Watcher 在内，存储了与组件的计算属性、侦听属性等相关联的其他 Watcher 实例。\n  let i = vm._watchers.length\n  while (i--) {\n    vm._watchers[i].teardown()\n  }\n\n  // __ob__标识了一个对象的响应式特性，并管理依赖追踪和引用计数等功能，可通过vmCount--来释放对应的Observer对象\n  if (vm._data.__ob__) {\n    vm._data.__ob__.vmCount--\n  }\n  // 标记组件已被销毁\n  vm._isDestroyed = true\n  // 将当前虚拟节点_vnode 设置为null，触发当前渲染树的销毁\n  vm.__patch__(vm._vnode, null)\n  // 触发destroyed生命周期钩子\n  callHook(vm, 'destroyed')\n  // 关闭所有监听事件\n  vm.$off()\n  // 删除 __vue__ 引用\n  // __vue__ 用来获取组件实例\n  if (vm.$el) {\n    vm.$el.__vue__ = null\n  }\n  // 解除循环引用\n  if (vm.$vnode) {\n    vm.$vnode.parent = null\n  }\n}\n","data-mdic-attach-content":"","data-mdic-notify-id":"j-notify-1689858627374-49100","data-mdic-notify-delay":"2000","data-mdic-copy-fail-text":"copy fail",onclick:"!function(t){const e={copy:(t='',e='')=>new Promise((c,o)=>{const n=document.createElement('textarea'),d=e?`\\n\\n${e}`:e;n.value=`${t}${d}`,document.body.appendChild(n),n.select();try{const t=document.execCommand('copy');document.body.removeChild(n),t?c():o()}catch(t){document.body.removeChild(n),o()}}),btnClick(t){const c=t&&t.dataset?t.dataset:{},o=c.mdicNotifyId,n=document.getElementById(o),d=c.mdicNotifyDelay,i=c.mdicCopyFailText;e.copy(c.mdicContent,c.mdicAttachContent).then(()=>{n.style.display='block',setTimeout(()=>{n.style.display='none'},d)}).catch(()=>{alert(i)})}};e.btnClick(t)}(this);"}},[t._v("复制代码")])])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br"),s("span",{staticClass:"line-number"},[t._v("26")]),s("br"),s("span",{staticClass:"line-number"},[t._v("27")]),s("br"),s("span",{staticClass:"line-number"},[t._v("28")]),s("br"),s("span",{staticClass:"line-number"},[t._v("29")]),s("br"),s("span",{staticClass:"line-number"},[t._v("30")]),s("br"),s("span",{staticClass:"line-number"},[t._v("31")]),s("br"),s("span",{staticClass:"line-number"},[t._v("32")]),s("br"),s("span",{staticClass:"line-number"},[t._v("33")]),s("br"),s("span",{staticClass:"line-number"},[t._v("34")]),s("br"),s("span",{staticClass:"line-number"},[t._v("35")]),s("br"),s("span",{staticClass:"line-number"},[t._v("36")]),s("br"),s("span",{staticClass:"line-number"},[t._v("37")]),s("br"),s("span",{staticClass:"line-number"},[t._v("38")]),s("br"),s("span",{staticClass:"line-number"},[t._v("39")]),s("br"),s("span",{staticClass:"line-number"},[t._v("40")]),s("br"),s("span",{staticClass:"line-number"},[t._v("41")]),s("br"),s("span",{staticClass:"line-number"},[t._v("42")]),s("br"),s("span",{staticClass:"line-number"},[t._v("43")]),s("br"),s("span",{staticClass:"line-number"},[t._v("44")]),s("br"),s("span",{staticClass:"line-number"},[t._v("45")]),s("br"),s("span",{staticClass:"line-number"},[t._v("46")]),s("br"),s("span",{staticClass:"line-number"},[t._v("47")]),s("br"),s("span",{staticClass:"line-number"},[t._v("48")]),s("br"),s("span",{staticClass:"line-number"},[t._v("49")]),s("br"),s("span",{staticClass:"line-number"},[t._v("50")]),s("br"),s("span",{staticClass:"line-number"},[t._v("51")]),s("br")])]),s("ol",[s("li",[t._v("检查是否正在销毁：\n"),s("ul",[s("li",[t._v("首先，检查组件实例的 "),s("code",[t._v("_isBeingDestroyed")]),t._v(" 属性，如果已经设置为 "),s("code",[t._v("true")]),t._v("，表示组件正在被销毁，直接返回，避免重复调用。")])])]),t._v(" "),s("li",[t._v("调用 "),s("code",[t._v("beforeDestroy")]),t._v(" 生命周期钩子：\n"),s("ul",[s("li",[t._v("调用 "),s("code",[t._v("callHook(vm, 'beforeDestroy')")]),t._v("，触发组件实例的 "),s("code",[t._v("beforeDestroy")]),t._v(" 生命周期钩子函数。")])])]),t._v(" "),s("li",[t._v("设置 "),s("code",[t._v("_isBeingDestroyed")]),t._v(" 属性为 "),s("code",[t._v("true")]),t._v("：\n"),s("ul",[s("li",[t._v("将组件实例的 "),s("code",[t._v("_isBeingDestroyed")]),t._v(" 属性设置为 "),s("code",[t._v("true")]),t._v("，表示组件正在被销毁。")])])]),t._v(" "),s("li",[t._v("从父级中移除当前组件：\n"),s("ul",[s("li",[t._v("获取父级组件实例，并检查父级组件是否正在被销毁，并且当前组件不是一个抽象组件。")]),t._v(" "),s("li",[t._v("如果满足条件，从父级的 "),s("code",[t._v("$children")]),t._v(" 数组中移除当前组件。")])])]),t._v(" "),s("li",[t._v("销毁组件的 Watcher 监听：\n"),s("ul",[s("li",[t._v("如果组件实例有一个 "),s("code",[t._v("_watcher")]),t._v("，调用其 "),s("code",[t._v("teardown")]),t._v(" 方法，将其销毁。")]),t._v(" "),s("li",[t._v("遍历组件实例的 "),s("code",[t._v("_watchers")]),t._v(" 数组，逐个调用其 "),s("code",[t._v("teardown")]),t._v(" 方法，销毁所有的 Watcher。")]),t._v(" "),s("li",[s("code",[t._v("teardown")]),t._v("方法的作用是从所有依赖向的Dep列表中将自己删除")])])]),t._v(" "),s("li",[t._v("移除数据对象的引用：\n"),s("ul",[s("li",[t._v("如果组件实例的 "),s("code",[t._v("_data")]),t._v(" 存在 "),s("code",[t._v("__ob__")]),t._v(" 属性，即存在 Observer 对象，将其 "),s("code",[t._v("vmCount")]),t._v(" 属性减一。")]),t._v(" "),s("li",[t._v("这是为了处理数据对象的引用计数，以确保在没有其他组件实例使用该数据对象时，将其释放。")])])]),t._v(" "),s("li",[t._v("标记组件已销毁：\n"),s("ul",[s("li",[t._v("将组件实例的 "),s("code",[t._v("_isDestroyed")]),t._v(" 属性设置为 "),s("code",[t._v("true")]),t._v("，表示组件已经被销毁。")])])]),t._v(" "),s("li",[t._v("调用 "),s("code",[t._v("__patch__")]),t._v(" 方法：\n"),s("ul",[s("li",[t._v("调用组件实例的 "),s("code",[t._v("__patch__")]),t._v(" 方法，将当前组件实例的虚拟节点 "),s("code",[t._v("_vnode")]),t._v(" 设置为 "),s("code",[t._v("null")]),t._v("，以触发对当前渲染树的销毁操作。")])])]),t._v(" "),s("li",[t._v("调用 "),s("code",[t._v("destroyed")]),t._v(" 生命周期钩子：\n"),s("ul",[s("li",[t._v("调用 "),s("code",[t._v("callHook(vm, 'destroyed')")]),t._v("，触发组件实例的 "),s("code",[t._v("destroyed")]),t._v(" 生命周期钩子函数。")])])]),t._v(" "),s("li",[t._v("关闭所有监听事件：\n"),s("ul",[s("li",[t._v("调用组件实例的 "),s("code",[t._v("$off")]),t._v(" 方法，关闭所有的事件监听。")])])]),t._v(" "),s("li",[t._v("删除 "),s("code",[t._v("__vue__")]),t._v(" 引用：\n"),s("ul",[s("li",[t._v("如果组件实例有 "),s("code",[t._v("$el")]),t._v(" 属性，将其 "),s("code",[t._v("$el.__vue__")]),t._v(" 引用设置为 "),s("code",[t._v("null")]),t._v("，解除引用关系。")])])]),t._v(" "),s("li",[t._v("解除循环引用：\n"),s("ul",[s("li",[t._v("如果组件实例有 "),s("code",[t._v("$vnode")]),t._v(" 属性，将其 "),s("code",[t._v("$vnode.parent")]),t._v(" 设置为 "),s("code",[t._v("null")]),t._v("，解除循环引用。")])])])]),t._v(" "),s("p",[t._v("需要注意的是，销毁阶段的钩子函数在组件销毁的过程中是按照父组件到子组件的顺序依次调用的。这意味着，先销毁父组件的钩子函数会在子组件的钩子函数之前被调用。")]),t._v(" "),s("h2",{attrs:{id:"总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),s("p",[t._v("本小节介绍了Vue生命周期最后一个阶段，销毁阶段")]),t._v(" "),s("p",[t._v("我们知道当调用"),s("code",[t._v("$destroy")]),t._v("方法时会进入销毁阶段，在销毁阶段，Vue 会执行一系列操作来清理和释放组件相关的资源。包括触发生命周期钩子函数、移除父级组件引用、销毁 Watcher、解除引用关系和执行清理工作等操作。")])])}),[],!1,null,null,null);s.default=e.exports}}]);